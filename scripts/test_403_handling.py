#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ 403 –≤ Scrapy –ø–∞—É–∫–µ.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫.

–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 3 –æ—à–∏–±–æ–∫ 403 –ø–æ–¥—Ä—è–¥ - –ø–∞—É–∑–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç.
"""

import requests
import json
import time
from datetime import datetime

class Mock403Handler:
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ 403 –∏ GraphQL –æ—à–∏–±–æ–∫ –∏–∑ spider"""
    
    def __init__(self):
        self.consecutive_403_count = 0
        self.max_consecutive_403 = 3
        self.pause_duration = 300  # 5 minutes
        self.is_paused = False
        self.total_403_errors = 0
        
        # GraphQL –æ–±—Ä–∞–±–æ—Ç–∫–∞
        self.graphql_retry_delay = 5
        self.graphql_max_retries = 3
        self.graphql_errors = 0
        self.graphql_retries = 0
        
    def handle_403_error(self, context="unknown"):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç _handle_403_error –∏–∑ spider"""
        self.total_403_errors += 1
        self.consecutive_403_count += 1
        
        print(f"üö´ 403 –æ—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context}")
        print(f"   –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö 403: {self.consecutive_403_count}/{self.max_consecutive_403}")
        
        if self.consecutive_403_count >= self.max_consecutive_403:
            print(f"üö® –î–û–°–¢–ò–ì–ù–£–¢–û –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û 403 –û–®–ò–ë–û–ö ({self.max_consecutive_403})")
            print(f"‚è∏Ô∏è  –°–¢–ê–í–ò–ú –ù–ê –ü–ê–£–ó–£ –ù–ê {self.pause_duration//60} –ú–ò–ù–£–¢")
            self.is_paused = True
            return True  # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—É–∑–∞
        else:
            remaining = self.max_consecutive_403 - self.consecutive_403_count
            print(f"‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É. –î–æ –ø–∞—É–∑—ã –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –æ—à–∏–±–æ–∫ 403")
            return False  # –ü–∞—É–∑–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    
    def handle_successful_request(self):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        if self.consecutive_403_count > 0:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ 403 –æ—à–∏–±–æ–∫ (–±—ã–ª–æ: {self.consecutive_403_count})")
            self.consecutive_403_count = 0
    
    def handle_graphql_error(self, error_message, retry_count=0):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É GraphQL –æ—à–∏–±–æ–∫"""
        self.graphql_errors += 1
        
        if error_message == "Internal Error" and retry_count < self.graphql_max_retries:
            self.graphql_retries += 1
            print(f"üîÑ GraphQL Internal Error. –ü–æ–≤—Ç–æ—Ä {retry_count + 1}/{self.graphql_max_retries}")
            print(f"   –û–∂–∏–¥–∞–Ω–∏–µ {self.graphql_retry_delay} —Å–µ–∫—É–Ω–¥...")
            return True  # –ù—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä
        else:
            print(f"‚ùå GraphQL –æ—à–∏–±–∫–∞ '{error_message}' –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫")
            return False  # –ü–æ–≤—Ç–æ—Ä –Ω–µ –Ω—É–∂–µ–Ω
            
    def resume_after_pause(self):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã"""
        print(f"‚èØÔ∏è  –í–û–ó–û–ë–ù–û–í–õ–Ø–ï–ú –†–ê–ë–û–¢–£ –ü–û–°–õ–ï –ü–ê–£–ó–´")
        print(f"   –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö 403 –æ—à–∏–±–æ–∫")
        self.is_paused = False
        self.consecutive_403_count = 0

def test_403_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ 403 –æ—à–∏–±–æ–∫"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò 403 –û–®–ò–ë–û–ö")
    print("=" * 50)
    
    handler = Mock403Handler()
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: 2 –æ—à–∏–±–∫–∏ 403, –∑–∞—Ç–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    print("\nüìù –°—Ü–µ–Ω–∞—Ä–∏–π 1: 2 –æ—à–∏–±–∫–∏ 403, –∑–∞—Ç–µ–º —É—Å–ø–µ—Ö")
    handler.handle_403_error("—Ç–µ—Å—Ç 1")
    handler.handle_403_error("—Ç–µ—Å—Ç 2")
    handler.handle_successful_request()
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: 3 –æ—à–∏–±–∫–∏ 403 –ø–æ–¥—Ä—è–¥ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–∞—É–∑–∞
    print("\nüìù –°—Ü–µ–Ω–∞—Ä–∏–π 2: 3 –æ—à–∏–±–∫–∏ 403 –ø–æ–¥—Ä—è–¥")
    needs_pause = handler.handle_403_error("—Ç–µ—Å—Ç 3")
    assert not needs_pause
    needs_pause = handler.handle_403_error("—Ç–µ—Å—Ç 4")
    assert not needs_pause
    needs_pause = handler.handle_403_error("—Ç–µ—Å—Ç 5")
    assert needs_pause
    print(f"   –°—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã: {handler.is_paused}")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–∞—É–∑—É (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ 5 –º–∏–Ω—É—Ç)
    print("   –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–∞—É–∑—É (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ 5 –º–∏–Ω—É—Ç)...")
    time.sleep(2)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    
    # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É
    handler.resume_after_pause()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω
    print(f"   –°—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {handler.consecutive_403_count}")
    print(f"   –í—Å–µ–≥–æ 403 –æ—à–∏–±–æ–∫: {handler.total_403_errors}")
    
    print("\n‚úÖ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ 403 –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

def test_graphql_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ GraphQL –æ—à–∏–±–æ–∫"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò GRAPHQL –û–®–ò–ë–û–ö")
    print("=" * 60)
    
    handler = Mock403Handler()
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: Internal Error —Å —É—Å–ø–µ—à–Ω—ã–º –ø–æ–≤—Ç–æ—Ä–æ–º
    print("\nüìù –°—Ü–µ–Ω–∞—Ä–∏–π 1: GraphQL Internal Error —Å –ø–æ–≤—Ç–æ—Ä–æ–º")
    needs_retry = handler.handle_graphql_error("Internal Error", 0)
    assert needs_retry
    needs_retry = handler.handle_graphql_error("Internal Error", 1)  # –£—Å–ø–µ—à–Ω—ã–π –ø–æ–≤—Ç–æ—Ä
    print("   ‚úÖ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: Internal Error –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º—É–º–∞ –ø–æ–ø—ã—Ç–æ–∫
    print("\nüìù –°—Ü–µ–Ω–∞—Ä–∏–π 2: Internal Error –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º—É–º–∞ –ø–æ–ø—ã—Ç–æ–∫")
    for i in range(4):  # 4 –ø–æ–ø—ã—Ç–∫–∏ - –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
        needs_retry = handler.handle_graphql_error("Internal Error", i)
        if i < 3:
            assert needs_retry
        else:
            assert not needs_retry
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –î—Ä—É–≥–∞—è GraphQL –æ—à–∏–±–∫–∞ (–Ω–µ Internal Error)
    print("\nüìù –°—Ü–µ–Ω–∞—Ä–∏–π 3: –î—Ä—É–≥–∞—è GraphQL –æ—à–∏–±–∫–∞")
    needs_retry = handler.handle_graphql_error("Syntax Error", 0)
    assert not needs_retry
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GraphQL:")
    print(f"   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {handler.graphql_errors}")
    print(f"   –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {handler.graphql_retries}")
    
    print("\n‚úÖ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ GraphQL –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

def test_real_403_response():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 403 –æ—à–∏–±–∫–∏ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞"""
    
    # URL API otomoto.pl
    test_url = "https://www.otomoto.pl/graphql"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ –±—Ä–∞—É–∑–µ—Ä
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.109 Safari/537.36',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
    }
    
    # –ü—Ä–æ—Å—Ç–æ–π GraphQL –∑–∞–ø—Ä–æ—Å
    query = {
        "operationName": "advertSearch",
        "variables": {
            "filters": [{"name": "filter_enum_make", "value": "volkswagen"}],
            "itemsPerPage": 32,
            "page": 1
        }
    }
    
    try:
        print(f"\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û –ó–ê–ü–†–û–°–ê")
        print(f"[{datetime.now()}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ {test_url}")
        response = requests.post(test_url, json=query, headers=headers, timeout=10)
        
        print(f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 403:
            print("üö´ –û–®–ò–ë–ö–ê 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
            print(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}...")
            return False
        elif response.status_code == 200:
            print("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω")
            try:
                data = response.json()
                if 'errors' in data:
                    print(f"   GraphQL –æ—à–∏–±–∫–∏: {data['errors']}")
                    return False
                else:
                    ads_count = len(data.get('data', {}).get('advertSearch', {}).get('edges', []))
                    print(f"   –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {ads_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                    return True
            except json.JSONDecodeError:
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON")
                return False
        else:
            print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}...")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False

if __name__ == "__main__":
    print("üï∑Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ 403 –≤ –ø—Ä–æ–µ–∫—Ç–µ EuroAutoDataHub")
    print("üÜï –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: 3 –æ—à–∏–±–∫–∏ 403 –ø–æ–¥—Ä—è–¥ = –ø–∞—É–∑–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É 403
    test_403_logic()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É GraphQL
    test_graphql_logic()
    test_graphql_logic()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    success = test_real_403_response()
    
    if not success:
        print("\n‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 403:")
        print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å User-Agent")
        print("   2. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        print("   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏")
        print("   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        print("   5. –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç anti-bot –∑–∞—â–∏—Ç—É")
        print("   6. üÜï –ü—Ä–∏ 3 –æ—à–∏–±–∫–∞—Ö –ø–æ–¥—Ä—è–¥ - –ø–∞—É–∑–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç")
        print("   7. üÜï –ü—Ä–∏ GraphQL Internal Error - –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
    
    print(f"\n[{datetime.now()}] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
